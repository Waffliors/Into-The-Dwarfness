/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *  Class Map, where Map will be created with a TileMap list and where it will *
 *  be drawn based on three Matrices: one for the floor, one for the walls and *
 *  the last for objects                                                       *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
package intothedwarfness.Classes;

import java.awt.Graphics;
import javax.swing.JPanel;
import java.util.ArrayList;
import java.awt.image.BufferedImage;

public class Map extends JPanel {
   /*------------------------------------------------------------------------*
    *------------------------ Class Variables -------------------------------*
    *------------------------------------------------------------------------*/
    private final BufferedImage SSheet;
    private final ArrayList<TileMap> TMList;
    private final int graphFloorMap[][];
    private final int graphWallMap[][];
    private final int graphObjectMap[][];

    /*------------------------------------------------------------------------*
     *----------------------- Class Constructor ------------------------------*
     *------------------------------------------------------------------------*/
    public Map(ArrayList<TileMap> TilemapList, BufferedImage spriteSheet){
        this.SSheet = spriteSheet;
        this.TMList = TilemapList;
        this.graphFloorMap =  new int[][]{
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6, 95, 88, 95, 89, 95, 90, 95,138,154,140,140,140,140,140,141,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6, 91, 95,105, 95, 92, 95, 93,138,170,171,188,156,173,172,174,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6, 95, 88, 95, 89, 95, 90, 95,109,170,188,172,173,171,156,174,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,104, 95,105, 95,106, 95,107, 95,186,187,188,156,172,173,174,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6, 95,108, 95,109, 95,104, 95,  6,  6,186,204,204,204,204,174,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6, 91, 95,105, 95, 92, 95, 93,  6,  6, 88, 95,105, 95,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,104,105, 92, 93, 89,109,105,104,  6,  6,  6,  6,  6,  6,  6, 91, 92},
				{  6,  6,  6,  6,  6,  6,  6,  6, 92,104, 93, 88, 95,104, 88,108,  6,  6,  6,  6,  6,  6,  6, 88, 89},
				{ 95, 88, 95, 89, 95, 90, 95, 91, 93,105, 89, 95,105, 95, 89,107,  6,  6,  6,  6,  6,  6,  6, 95,105},
				{105, 95,106, 95,107, 95,108, 95,109, 92,109,104, 95, 92, 90,106,  6,  6,  6,  6,  6,  6,  6, 90,104},
				{ 95,109, 95,104, 95,105, 95, 92,215,215,215,215,215,215,215,215,230,  6,  6,  6,  6,  6,  6, 91, 92},
				{ 88, 95, 89, 95, 90, 95, 91, 95,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,105, 88},
				{ 95,105, 95,106, 95,107, 95,108,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 91, 90},
				};
        this.graphObjectMap = new int[][]{
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,257,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,275,276,  6,  6,  6,  6,  6,  6,  6,  6,273,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,259,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,211,  6,  6,  6,  6,  6,  6,  6,  6,241,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,240,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,242},
				{  6,  6,277,278,  6,  6,  6,  6,  6,  6,  6,243,244,245,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,212,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				};
        this.graphWallMap = new int[][]{
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  3,  4,  4,  4,  4,  4,  5,  3, 44,  4,  4, 14,  4,  4,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6, 19, 59, 59, 23, 24, 58, 21, 19, 60, 59, 59, 30, 58, 58, 21,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6, 18,  6,  6,  6,  6,  6, 32, 34,  6,  6,  6,  6,  6,  6, 16,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6, 18,  6,  6,  6,  6,  6, 48, 50,  6,  6,  6,  6,  6,  6, 16,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6, 18,  6,  6,  6,  6,  6, 98, 36, 36, 97,  6,  6, 98, 36, 99,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6, 18,  6,  6,  6,  6,  6,114, 52, 52,113,  6,  6,114, 52,115,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6, 96, 36, 36, 36, 36, 36, 99,  3, 33, 34,  6,  6, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
				{  6, 51, 52, 52, 52, 52, 52, 53, 19, 57, 50,  6,  6, 48, 49, 49,144,145,145,145,145,145,148, 49, 49},
				{  9,  7,  8,  9,  9,  9,  9,  5, 18,  6,  6,  6,  6,  6,  6,  6,160,161,161,161,161,161,164,  6,  6},
				{ 59, 59, 23, 24, 49, 49, 49, 21, 18,  6,  6,  6,  6,  6,  6,  6,176,177,177,177,177,177,180,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6, 16, 18,  6,  6,  6,  6,  6,  6,  6,214,215,215,215,215,215,216,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6, 16, 18,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6, 16, 18,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6, 16, 18,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				{  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6},
				};
    }
    
   /*------------------------------------------------------------------------*
    *------------------------- Class Methods --------------------------------*
    *------------------------------------------------------------------------*/
    @Override
    public void paintComponent(Graphics g) {
        for (int x = 0; x < graphFloorMap[0].length; x++) {
            for (int y = 0; y < graphFloorMap.length; y++) {
                g.drawImage(SSheet, (x * 64), (y * 64), (x * 64) + 64, (y * 64) + 64, TMList.get(graphFloorMap[y][x]).getSrcX1(), TMList.get(graphFloorMap[y][x]).getSrcY1(), TMList.get(graphFloorMap[y][x]).getSrcX2(), TMList.get(graphFloorMap[y][x]).getSrcY2(), null);
                g.drawImage(SSheet, (x * 64), (y * 64), (x * 64) + 64, (y * 64) + 64, TMList.get(graphWallMap[y][x]).getSrcX1(), TMList.get(graphWallMap[y][x]).getSrcY1(), TMList.get(graphWallMap[y][x]).getSrcX2(), TMList.get(graphWallMap[y][x]).getSrcY2(), null);
                g.drawImage(SSheet, (x * 64), (y * 64), (x * 64) + 64, (y * 64) + 64, TMList.get(graphObjectMap[y][x]).getSrcX1(), TMList.get(graphObjectMap[y][x]).getSrcY1(), TMList.get(graphObjectMap[y][x]).getSrcX2(), TMList.get(graphObjectMap[y][x]).getSrcY2(), null);
            }
        }
    }


}
